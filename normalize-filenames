#! /usr/bin/env ruby
# frozen_string_literal: true

require 'find'
require 'bundler/inline'

# this environment variable causes issues with bundler/inline
ENV.delete 'BUNDLE_BIN'

gemfile do
  source 'https://rubygems.org'

  gem 'thor', '~> 1.0.1'
end

class FilenameNormalizer < Thor
  def self.exit_on_failure?
    true
  end

  check_unknown_options!

  desc 'unicode PATH', 'Perform Unicode normalization on filenames in PATH'
  method_option :operation,
                desc: 'Whether to compose Unicode grapheme clusters into single code points, or decompose them into multi-code-point sequneces',
                type: :string,
                enum: %w[compose decompose],
                default: 'compose',
                required: true,
                aliases: '-o'
  method_option :glyph_preservation,
                desc: 'Whether to preserve glyphs or replace applicable glyphs with compatibility characters',
                banner: 'PRESERVATION_TYPE',
                type: :string,
                enum: %w[canonical compatibility],
                default: 'canonical',
                required: true,
                aliases: '-g'
  method_option :verbose,
                desc: 'Print verbose output of every file and folder visited',
                type: :boolean,
                aliases: '-v'
  def unicode(path)
    validate_unicode_options! path
    form = unicode_form

    Find.find(path) do |path|
      if options[:verbose]
        if File.directory?(path)
          shell.say_status :directory, path, :blue
        else
          shell.say_status :file, path, :blue
        end
      end

      path = path.force_encoding('UTF-8')
      unless path.valid_encoding?
        shell.say_status :invalid, path, :red
        next
      end

      normalized = path.unicode_normalize form
      next unless path != normalized

      shell.say_status :unnormalized, path, :yellow
      begin
        File.rename path, normalized
      rescue Exception => e
        shell.say_status :'rename fail', "#{path.inspect} => #{normalized.inspect}: #{e.message.dump[1..-1]}", :red
      else
        shell.say_status :rename, "#{path.inspect} => #{normalized.inspect}"
      end
    end
  end

  private

  def validate_unicode_options!(path)
    if options[:operation].nil?
      shell.say_status :missing, 'operation option', :red
      exit false
    end

    if options[:glyph_preservation].nil?
      shell.say_status :missing, 'glyph-preservation option', :red
      exit false
    end

    if path.empty?
      shell.say_status :invalid, 'path cannot be empty', :red
      exit false
    end

    unless File.exist? path
      shell.say_status 'not found', path, :red
      exit false
    end
  end

  def unicode_form
    case options.values_at(:operation, :glyph_preservation)
    when %w[compose canonical]
      :nfc
    when %w[decompose canonical]
      :nfd
    when %w[compose compatibility]
      :nfkc
    when %w[decompose compatibility]
      :nfkd
    else
      raise "Unexpected unicode options #{options.values_at(:operation, :glyph_preservation)}"
    end
  end
end

FilenameNormalizer.start
